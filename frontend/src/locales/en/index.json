{
  "navigation": {
    "home": "Home",
    "familyTree": "Tree",
    "search": "Search",
    "people": "People",
    "actions": "Actions"
  },
  "home": {
    "title": "Decentralized Digital Family Tree",
    "subtitle": "Zero-knowledge privacy · Unlinkability · Multi-version governance · Community endorsement · NFT biographies",
    "exploreFamilyTree": "Explore Family Tree",
    "addPerson": "Add Person",
    "search": "Search",
    "blockchainActions": "Add Person",
    "tagStrip": {
      "protocol": "Private",
      "incentive": "Endorse",
      "nft": "NFT Bio",
      "zk": "Sealed"
    },
    "coreValue": {
      "title": "Core Mission",
      "description": "Building a permanently trusted global digital genealogy infrastructure"
    },
    "valueProps": {
      "title": "Core Value Propositions",
      "subtitle": "A trusted multi-dimensional genealogy layer turning open exploration into confirmed value.",
      "zkPrivacy": {
        "title": "Zero-Knowledge Privacy",
        "description": "Zero-knowledge proofs privately submit family relationships, proving the committer holds the private data behind the commitment without revealing plaintext"
      },
      "saltedUnlinkability": {
        "title": "Unlinkability",
        "description": "Optional passphrases are Poseidon-salted to block identity inference and pollution; share a passphrase for collaboration or keep one private to isolate"
      },
      "dualTreeModels": {
        "title": "Multi-Version Governance",
        "description": "People can submit multiple versions in parallel; on-chain deduplication plus parent pointers preserve traceable history while endorsements surface the most trusted one"
      },
      "communityEndorsement": {
        "title": "Community Endorsement",
        "description": "Endorsing with DEEP tokens carries real cost, so endorsers vote with fees to surface trustworthy versions and dilute noise"
      },
      "nftValueCreation": {
        "title": "NFT Value Creation",
        "description": "Backed versions mint into NFT biographies where holders capture future endorsement fees and story traffic, rewarding quality contributions"
      },
      "storyShardingSealing": {
        "title": "Story Sharding & Sealing",
        "description": "Story shards append details with hash checks; sealing makes them permanently immutable so archives stay rich and trustworthy"
      }
    },
    "valueSystem": {
      "title": "Two-Layer Value System",
      "subtitle": "Progressive privacy path: hash submission → community endorsement → NFT disclosure",
      "layer1": {
        "title": "Hash Privacy Layer",
        "description": "Only salted hash commitments are submitted at this layer—no plaintext ever touches the chain. Zero-knowledge proofs keep the entire submission process private.",
        "feature1": "Store salted hash commitments only, no plaintext on-chain",
        "feature2": "Salted passphrases block identity inference and pollution",
        "feature3": "Shared passphrases enable private collaboration; strong solo passphrases fully isolate trees"
      },
      "layer2": {
        "title": "NFT Biography Layer",
        "description": "Endorsed versions can be minted into NFT biographies, and minting immediately discloses the full narrative on-chain. Story sharding keeps detailed histories verifiable over time.",
        "feature1": "Minting publishes the complete NFT biography",
        "feature2": "Endorsements drive community consensus and incentives",
        "feature3": "Story shards extend biographies with on-chain verification"
      },
      "flow": {
        "title": "Privacy to Value Flow",
        "description": "From private hash storage to community-validated NFT assets",
        "step1": "Private Submission",
        "step1Desc": "Add family members with zero-knowledge proofs",
        "step2": "Public Disclosure",
        "step2Desc": "Mint NFTs revealing full biographical information"
      },
      "dualModels": {
        "title": "Dual Family Tree Models",
        "description": "Salted passphrase system enables both collaborative public trees and pollution-resistant private trees",
        "public": {
          "title": "Public Collaborative Trees",
          "description": "Shared passphrases enable multiple users to collaboratively build comprehensive family trees together.",
          "benefit": "Community Collaboration",
          "mode": "Shared Passphrase Mode"
        },
        "private": {
          "title": "Private Protected Trees",
          "description": "Unique passphrases create completely protected trees immune to pollution attacks and relationship corruption.",
          "benefit": "Anti-Pollution Protection",
          "mode": "Unique Passphrase Mode"
        }
      },
      "advantages": {
        "title": "Workflow",
        "subtitle": "Five-step value discovery and consensus formation mechanism",
        "step1": "Add Person Version",
        "step1Desc": "Submit parent hash commitments → earn mining rewards",
        "step2": "User Endorsement",
        "step2Desc": "Pay DEEP tokens to endorse a version",
        "step3": "Mint Version NFT",
        "step3Desc": "Endorsers can mint NFTs for corresponding versions",
        "step4": "Write Story Shards",
        "step4Desc": "NFT holders write/append person story fragments",
        "step5": "Story Sealing",
        "step5Desc": "Seal stories to form immutable on-chain historical records",
        "conclusion": "Value-Driven Collaborative Network",
        "conclusionDesc": "Through economic incentive mechanisms, achieving natural accumulation and value discovery of high-quality genealogy data"
      },
      "privacyLayer": {
        "title": "Privacy Protection Layer",
        "description": "Privacy protection mechanism based on zero-knowledge proofs, ensuring security of sensitive information",
        "feature1": "Zero-knowledge proof verification",
        "feature2": "Sensitive field hiding",
        "feature3": "Structural correctness verification"
      },
      "valueLayer": {
        "title": "Value Confirmation Layer",
        "description": "Achieving data value confirmation and distribution through economic incentives and consensus mechanisms",
        "feature1": "Endorsement consensus mechanism",
        "feature2": "NFT value binding",
        "feature3": "Revenue rights distribution"
      }
    },
    "features": {
      "title": "Core Features",
      "subtitle": "An end-to-end workflow turning private submissions into lasting genealogy value",
      "zkVersion": {
        "title": "Private Submission Flow",
        "description": "Zero-knowledge proofs with salted passphrase commitments keep onboarding private while only hash commitments touch the chain."
      },
      "versionManagement": {
        "title": "Multi-Version Governance",
        "description": "Person versions store parent pointers and timestamps; on-chain deduplication plus endorsement ordering keeps history traceable."
      },
      "endorsementEconomy": {
        "title": "Endorsement Economy Loop",
        "description": "Every endorsement costs DEEP and splits between holder, contributor, and protocol, binding trusted consensus to real economic stakes."
      },
      "personNFT": {
        "title": "NFT Biographies",
        "description": "Endorsed versions mint into NFT biographies that disclose core info; holders can extend stories and capture ongoing fee streams."
      },
      "storySharding": {
        "title": "Story Sharding & Sealing",
        "description": "Append life stories in 100×1KB shards with hash checks, then seal them for immutable, trustworthy on-chain archives."
      },
      "versionNotarization": {
        "title": "Collaboration & Private Modes",
        "description": "Default no-passphrase joins the public space; shared passphrases enable joint trees, while strong solo passphrases create isolated private zones."
      }
    },
    "tokenomics": {
      "title": "Incentives & Token Economics",
      "subtitle": "A DEEP token-powered loop that keeps incentives and data quality aligned",
      "deepToken": {
        "title": "DEEP Token",
        "description": "Progressive halving issuance keeps rewards tapering with contributions while maintaining long-term supply discipline."
      },
      "supply": {
        "title": "Supply Cap",
        "description": "Supply capped at 100B tokens with no pre-mine; issuance only happens through protocol interactions."
      },
      "mining": {
        "title": "Mining Trigger",
        "description": "Rewards mint only when a new person submits parent hash commitments, incentivizing structured completion without exposing parent plaintext."
      },
      "endorsement": {
        "title": "Endorsement Fees",
        "description": "Fees track the current reward level; the protocol can retain a small share to raise the real cost of self-endorsement."
      },
      "distribution": {
        "title": "Fee Distribution",
        "description": "Fees flow between submitters and NFT holders—before minting they reward the creator, after minting they follow the NFT ownership."
      },
      "goal": {
        "title": "Economic Goals",
        "description": "Use real-cost consensus to reward accurate relationships while suppressing spam and repetitive noise."
      }
    },
    "audience": {
      "title": "Target Audiences",
      "subtitle": "A collaborative ecosystem where every role contributes and benefits",
      "contributors": {
        "title": "Data Contributors",
        "description": "Input, enrich, and verify genealogy data to build a trusted network",
        "benefit1": "Earn DEEP mining rewards",
        "benefit2": "Share in ongoing endorsement fees"
      },
      "researchers": {
        "title": "Family Researchers",
        "description": "Track version evolution and divergences to surface multi-voiced family narratives",
        "benefit1": "Access the complete version history",
        "benefit2": "Explore hidden links across relationship graphs"
      },
      "developers": {
        "title": "Developers",
        "description": "Integrate contracts and components to build secondary apps and knowledge tooling",
        "benefit1": "Leverage the full protocol API",
        "benefit2": "Ship decentralized genealogy experiences"
      },
      "creators": {
        "title": "Narrative Creators",
        "description": "Write and seal family stories, turning memories into verifiable archives",
        "benefit1": "Preserve work permanently on-chain",
        "benefit2": "Protect authorship via story sharding"
      }
    },
    "contracts": {
      "title": "Smart Contract Architecture",
      "subtitle": "A complete family tree smart contract system covering person management, endorsement systems, NFT minting, and governance mechanisms",
      "familyTree": {
        "feature1": "Person Management System",
        "feature2": "Endorsement Staking Mechanism",
        "feature3": "NFT Minting Functionality"
      },
      "token": {
        "feature1": "ERC20 Token Contract",
        "feature2": "10 Halving Phases",
        "feature3": "Total Supply 100 Billion"
      },
      "votes": {
        "feature1": "NFT Voting Weight",
        "feature2": "Endorsement Challenge Proposals",
        "feature3": "Fee Adjustment Proposals"
      }
    },
    "cta": {
      "title": "Start Building Your Digital Family Tree",
      "subtitle": "Build your digital family tree using smart contracts and search in constructing a decentralized family history recording system",
      "startButton": "Start Building",
      "exploreButton": "Explore Family Tree",
      "experience": "Experience Now",
      "search": "Search Family",
      "configure": "Configure Connection",
      "opensource": "Open Source on GitHub",
      "free": "Free & Open Source",
      "license": "MIT License",
      "privacy": "Privacy Protection",
      "security": "Security Guarantee",
      "github": "Open Source"
    }
  },
  "search": {
    "title": "Search",
    "query": "Query",
    "reset": "Reset",
    "copy": "Copy",
    "copied": "Copied",
    "copyFailed": "Copy failed",
    "loading": "Loading...",
    "noData": "No data",
    "prev": "Previous",
    "next": "Next",
    "queryFailed": "Query failed",
    "totalResults": "Total results",
    "nameQuery": {
      "title": "Query by Full Name",
      "fullName": "Full Name",
      "pageSize": "Page Size (≤100)",
      "placeholder": "e.g., John Smith"
    },
    "endorsementQuery": {
      "title": "Endorsement Statistics Query",
      "personHash": "Person Hash",
      "placeholder": "0x1234...abcd (64-character hexadecimal)",
      "version": "Version",
      "endorsementCount": "Endorsements",
      "tokenId": "Token ID"
    },
    "uriQuery": {
      "title": "URI History Query",
      "tokenId": "Token ID",
      "placeholder": "Enter Token ID"
    },
    "versionsQuery": {
      "title": "Person Versions Query",
      "personHash": "Person Hash",
      "placeholder": "0x1234...abcd (64-character hexadecimal)",
      "versionIndex": "Version Index",
      "creator": "Creator",
      "addTime": "Add Time",
      "fatherHash": "Father Hash",
      "motherHash": "Mother Hash",
      "fatherVersion": "Father Version",
      "motherVersion": "Mother Version",
      "versionTag": "Version Tag",
      "metadataCID": "Metadata CID",
      "unknown": "Unknown",
      "none": "None"
    },
    "storyChunksQuery": {
      "title": "Story Chunks Query",
      "tokenId": "Token ID",
      "placeholder": "Enter NFT Token ID",
      "chunkIndex": "Chunk Index",
      "chunkHash": "Chunk Hash",
      "content": "Content",
      "timestamp": "Timestamp",
      "editor": "Editor",
      "contentPreview": "Content Preview",
      "totalChunks": "Total Chunks"
    },
    "childrenQuery": {
      "title": "Children Query",
      "parentHash": "Parent Hash",
      "parentVersion": "Parent Version",
      "parentHashPlaceholder": "0x1234...abcd (64-character hexadecimal)",
      "parentVersionPlaceholder": "Enter parent version index",
      "childHash": "Child Hash",
      "childVersion": "Child Version",
      "totalChildren": "Total Children"
    },
    "hashCalculator": {
      "title": "Calculate personHash Locally",
      "tip": "💡 Tip: Use the tool below to calculate person hash, then copy it to use in the queries below",
      "name": "Full Name",
      "isBirthBC": "Era",
      "birthYear": "Birth Year",
      "birthMonth": "1-12",
      "birthDay": "1-31",
      "gender": "Gender",
      "genderOptions": {
        "unknown": "Unknown",
        "male": "Male",
        "female": "Female",
        "other": "Other"
      },
      "birthYearLabel": "Birth Year",
      "birthMonthLabel": "Month",
      "birthDayLabel": "Day",
      "passphrase": "Passphrase",
      "passphrasePlaceholder": "Enter any characters—family mottos or secret phrases. 12+ characters with mixed symbols recommended",
      "passphraseHelp": {
        "title": "Passphrase Usage Guide",
        "privacy": "🔒 Privacy Protection",
        "privacyDesc": "Adds an extra protection layer to your identity hash, preventing others from guessing your identity through name and birth date.",
        "optional": "✅ Completely Optional",
        "optionalDesc": "Optional; accepts any characters such as mottos or secret codes. Relatives can share one passphrase to collaborate—use 12+ characters and keep it safe for better privacy.",
        "remember": "⚠️ Please Remember",
        "rememberDesc": "Passphrase cannot be recovered. If forgotten, a different identity hash will be generated.",
        "privacyNoteTitle": "🔐 Local Only",
        "privacyNote": "The passphrase is hashed locally only; nothing is uploaded or stored."
      },
      "passwordStrength": {
        "weak": "Weak",
        "medium": "Medium",
        "strong": "Strong"
      },
      "passwordTips": {
        "weak": "💡 Tip: Use at least 12 characters and mix in numbers, punctuation, symbols, or emoji"
      },
      "passphraseCharCount": "Characters after trim: {{count}}",
      "nameInputPlaceholder": "e.g., John Smith",
      "toggleNo": "No",
      "toggleYes": "Yes",
      "birthPlace": "Birth Place (Optional)",
      "birthPlacePlaceholder": "e.g., US-CA-Los Angeles",
      "compute": "Calculate",
      "result": "Result",
      "hashLabel": "Hash:",
      "description": "Note: Calculation logic is completely consistent with the contract getPersonHash.",
      "bcOptions": {
        "ad": "AD",
        "bc": "BC"
      },
      "calculatedHash": "Calculated Hash",
      "contractHash": "Contract Hash",
      "hashesMatch": "Hashes match",
      "hashesNoMatch": "Hashes don't match"
    },
    "validation": {
      "nameRequired": "Please enter name",
      "nameTooLong": "Name cannot exceed 256 bytes (approximately 256 English characters)",
      "hashRequired": "Please enter person hash",
      "hashInvalid": "Please enter a valid 64-character hexadecimal hash",
      "tokenIdRequired": "Please enter a valid Token ID",
      "versionIndexRequired": "Please enter a valid version index (≥0)",
      "required": "Required",
      "monthRange": "Month must be between 0-12",
      "dayRange": "Day must be between 0-31",
      "yearRange": "Year must be between 0-10000",
      "yearExceedsCurrent": "AD year cannot exceed current year"
    },
    "offset": "offset"
  },
  "familyTree": {
    "title": "FamilyTree",
    "viewModes": {
      "tree": "Tree",
      "dag": "DAG",
      "force": "Force Directed",
      "virtual": "Virtualized"
    },
    "versionSelector": {
      "label": "Version Selection",
      "apply": "Apply"
    },
    "config": {
      "rpc": "RPC",
      "contract": "Contract",
      "root": "Root Hash",
      "clearAndRefresh": "Clear",
      "strictCacheOnly": "Strict Cache Only",
      "strictCacheOn": "Offline Mode",
      "strictCacheOff": "Online Mode",
      "rootHistory": "Root hash history",
      "reset": "Reset",
      "resetToDefaults": "Reset to environment defaults"
    },
    "ui": {
      "displaySettings": "Data Options",
      "versionNumber": "Version Index",
      "contractModeConfig": "Config",
      "traversalDFS": "DFS - Depth-First (deeper nodes earlier)",
      "traversalBFS": "BFS - Breadth-First (level order)",
      "traversal": "Traversal Mode",
      "traversalDesc": "DFS depth-first (faster deep nodes) / BFS breadth-first (level-wise)",
      "includeVersionDetails": "Load Details",
      "includeVersionDetailsDesc": "Affects whether version detail batches are loaded on the next refresh (snapshot taken at refresh).",
      "progressSummary": "Nodes {{created}} / depth {{depth}}",
      "nodesLabelFull": "Nodes",
      "depthLabelFull": "Depth",
      "edit": "Edit",
      "save": "Save",
      "cancel": "Cancel",
      "deduplicateChildren": "Deduplicate Children",
      "deduplicateChildrenTooltip": {
        "enabled": "Highest endorsed version only",
        "disabled": "Show all versions"
      }
    },
    "status": {
      "loading": "Loading...",
      "contractModeRootNotFound": "Root node version not found. Please check the hash and version number.",
      "rootNotFound": "Root node not found. Please check the Root configuration or wait for indexing",
      "contractOk": "Contract data loaded",
      "badge": {
        "checking": "Checking",
        "ok": "OK",
        "root_missing": "Root Missing",
        "error": "Error"
      },
      "networkError": "Network request failed",
      "rateLimited": "RPC rate limit exceeded. Please try again later."
    },
    "actions": {
      "refresh": "Refresh",
      "remove": "Remove",
      "clearAll": "Clear all"
    },
    "nodeDetail": {
      "title": "Node Detail",
      "hash": "Hash",
      "version": "Version",
      "endorsementCount": "Endorsements",
      "father": "Father Hash",
      "fatherVersion": "Father Version",
      "mother": "Mother Hash",
      "motherVersion": "Mother Version",
      "addedBy": "Added By",
      "timestamp": "Timestamp",
      "tag": "Tag",
      "cid": "CID",
      "nft": "NFT",
      "tokenId": "Token ID",
      "fullName": "Full Name",
      "gender": "Gender",
      "birth": "Birth",
      "death": "Death",
      "story": "Brief Biography",
      "profile": "Profile",
      "storyChunks": "Chunks Count",
      "storyLength": "Total Length",
      "sealed": "Sealed",
      "lastUpdate": "Last Update",
      "showFullStory": "Show Full Story",
      "hideFullStory": "Hide Full Story",
      "showChunks": "Show Chunks",
      "hideChunks": "Hide Chunks",
      "encyclopedia": "Encyclopedia",
      "editStory": "Edit Story",
    "edit": "Edit",
    "viewFullStory": "View Full Story",
    "mintNFTTooltip": "Mint this person as an NFT",
    "uri": "URI",
      "loading": "Loading NFT info…",
      "loadErrorPrefix": "NFT load failed",
      "bcPrefix": "BC",
      "genders": {
        "male": "Male",
        "female": "Female",
        "other": "Other"
      },
      "errors": {
        "nftLoadFailed": "NFT load failed",
        "loadFailed": "Load failed"
      }
    },
    "personVersionDetail": {
      "title": "Person Version Details"
    },
    "validation": {
      "rpc": "Please enter a valid RPC URL",
      "contract": "Please enter a valid contract address (0x + 40 hex chars)",
      "root": "Please enter a valid root hash (0x + 64 hex chars)",
      "version": "Please enter a valid version index"
    }
  },
  "common": {
    "back": "Back",
    "confirm": "Go to FamilyTree",
    "cancel": "Cancel",
    "goBack": "Go Back",
    "close": "Close",
    "error": "Error",
    "hashCopied": "Hash copied",
    "copy": "Copy",
    "copied": "Copied"
  },
  "wallet": {
    "connect": "Connect Wallet",
    "connecting": "Connecting...",
    "disconnect": "Disconnect",
    "wrongNetwork": "Wrong Network",
    "noMetaMask": "Please install MetaMask",
    "noWallet": "Please install a wallet extension",
    "selectWallet": "Select Wallet",
    "noWalletsFound": "No wallets found",
    "installWallet": "Please install a wallet extension",
    "connected": "Wallet connected successfully",
    "rejected": "Connection rejected by user",
    "pending": "Connection request already pending",
    "connectionFailed": "Failed to connect wallet",
    "disconnected": "Wallet disconnected",
    "chainSwitched": "Chain switched successfully",
    "chainNotAdded": "Chain not added to wallet",
    "chainSwitchFailed": "Failed to switch chain",
    "notConnected": "Please connect your wallet",
    "keepVisible": "Keep wallet popup visible:",
    "dontClickOutside": "Don't click outside the wallet popup",
    "checkTaskbar": "Check taskbar if popup disappears",
    "useAltTab": "Use Alt+Tab to find hidden wallet window",
    "waitForConfirm": "Wait for transaction confirmation before closing"
  },
  "theme": {
    "switchToLight": "Switch to Light",
    "switchToDark": "Switch to Dark",
    "light": "Light",
    "dark": "Dark"
  },
  "settings": {
    "theme": "Theme",
    "language": "Language"
  },
  "storyEditor": {
    "title": "Story Editor"
  },
  "storyChunkEditor": {
    "title": "Biography Chunk Editor",
    "titleWithName": "{{name}} Biography",
    "titleFallback": "Biography",
    "stats": "Chunks: {{count}}, Total Length: {{length}}",
    "totalLength": "Total Length",
    "sealed": "Sealed",
    "seal": "Seal",
    "hashLabel": "Hash",
    "editChunk": "Edit Chunk",
    "addChunk": "Add New Chunk",
    "contentPlaceholder": "Enter chunk content (max 2048 bytes)",
    "saving": "Saving...",
    "save": "Save",
    "cancel": "Cancel",
    "addNewChunk": "Add New Chunk",
    "chunks": "Existing Chunks",
    "loading": "Loading...",
    "contentRequired": "Content cannot be empty",
    "contentTooLong": "Content cannot exceed 2048 bytes",
    "noChunks": "No story chunks yet.",
    "chunkTypeLabel": "Chunk Type",
    "attachmentLabel": "Attachment CID (optional)",
    "attachmentPlaceholder": "CID (e.g. bafy...) or leave empty",
    "attachmentTooLong": "Attachment CID cannot exceed 256 characters",
    "invalidChunkType": "Invalid chunk type",
    "operationFailed": "Operation failed",
    "sealConfirm": "Are you sure you want to seal the biography? Once sealed, it cannot be modified.",
    "sealFailed": "Seal failed",
    "leaveConfirmTitle": "Leave Editor",
    "leaveConfirm": "Unsaved changes will be lost. Do you want to leave the editor?",
    "leaveConfirmButton": "Leave",
    "sealDialog": {
      "title": "Seal Biography",
      "description": "Are you sure you want to seal the biography? Once sealed, it can no longer be modified.",
      "dontAskAgain": "Don't ask again",
      "cancel": "Cancel",
      "confirm": "Confirm Seal"
    },
    "contentTooLongBytes": "Content must not exceed 2048 bytes",
    "contentPlaceholderBytes": "Enter chunk content (max 2048 bytes ≈ 2048 ASCII or ~680 CJK chars)",
    "chunkTypes": {
      "narrative": "Narrative",
      "work": "Work / Achievement",
      "quote": "Quote",
      "media": "Media",
      "timeline": "Timeline",
      "commentary": "Commentary",
      "source": "Source",
      "correction": "Correction",
      "editorial": "Editorial",
      "unknown": "Unknown"
    },
    "offlineNoData": "Offline mode: story not cached locally",
    "success": {
      "chunkAdded": "Chunk #{{index}} added successfully ({{bytes}} bytes)",
      "chunkAddedGeneric": "Story chunk added successfully",
      "chunkUpdated": "Chunk #{{index}} updated successfully",
      "chunkUpdatedGeneric": "Story chunk updated successfully",
      "storySealed": "Story sealed successfully ({{total}} chunks)",
      "storySealedGeneric": "Story sealed successfully"
    },
    "errors": {
      "mustBeNFTHolder": "You must own this NFT to edit its story",
      "unauthorized": "Not authorized to perform this action",
      "onlyOwner": "Only the owner can perform this action",
      "storySealed": "Story is sealed and cannot be modified",
      "chunkIndexExists": "Chunk at this index already exists",
      "invalidChunkIndex": "Invalid chunk index",
      "contentTooLong": "Content exceeds maximum length",
      "expectedHashMismatch": "Expected hash does not match",
      "chunkHashMismatch": "Chunk content does not match expected hash",
      "chunkIndexOutOfRange": "Chunk index is out of valid range",
      "customError": "Contract error: {{error}}",
      "transactionReverted": "Transaction failed: execution reverted",
      "userRejected": "Transaction was rejected by user",
      "walletTimeout": "Wallet confirmation timed out. Please reopen your wallet and confirm the transaction.",
      "walletPending": "Wallet has a pending request. Open your wallet to confirm or cancel it, then try again.",
      "insufficientFunds": "Insufficient funds for gas",
      "unknown": "An unknown error occurred"
    }
  },
  "person": {
    "encyclopedia": "Biography Wiki",
    "pageTitle": "{{name}} Biography Wiki",
    "title": "Biography Wiki",
    "loading": "Loading biography...",
    "notFound": "Biography not found",
    "chunks": "Chunks",
    "length": "Length",
    "sealed": "Sealed",
    "edit": "Edit Biography",
    "fullStory": "Biography",
    "noStory": "No biographical content",
    "chunkList": "Chunk List",
    "characters": "characters",
    "noChunks": "No chunks",
    "metadata": "Metadata",
    "totalChunks": "Total Chunks",
    "totalLength": "Total Length",
    "lastUpdate": "Last Update",
    "status": "Status",
    "editable": "Editable",
    "storyHash": "Biography Hash",
    "owner": "Owner Address",
    "basicInfo": "Basic Info",
    "paragraph": "Paragraph",
    "raw": "Raw",
    "viewParagraph": "Paragraph Mode",
    "viewRaw": "Raw Mode",
    "integrityOk": "Integrity Verified",
    "integrityWarn": "Integrity Possibly Inconsistent",
    "integrityLenDiff": "Length mismatch local={{local}} bytes",
    "integrityLocalHashMismatch": "Local hash mismatch",
    "integrityChainHashMismatch": "On-chain hash mismatch",
    "integrityMissing": "Missing indices: {{indices}}",
    "integrityFrontendOk": "Integrity Verified",
    "integrityChainFail": "On-chain verification failed",
    "verify": "Contract Verify",
    "verified": "Verified",
    "personHashLabel": "Person Hash",
    "versionLabel": "Version Index",
    "viewFamilyTree": "View Family Tree",
    "invalidTokenId": "Invalid Token ID",
    "nonexistentToken": "Token does not exist",
    "fetchFailed": "Failed to load token",
    "tokenId": "Token ID"
  },
  "people": {
    "syncing": "Syncing...",
    "loading": "Loading people...",
    "badge": "People Encyclopedia",
    "title": "Family People Encyclopedia",
    "subtitle": "Explore family member profiles preserved on the blockchain",
    "totalPeople": "People",
    "withStories": "Biographies",
    "withNFTs": "NFTs",
    "searchPlaceholder": "Search by name, location, or biography content...",
    "filterByAddress": "Filter by creator address...",
    "filterByTag": "Filter by tag...",
    "clearFilters": "Clear all filters",
    "filteredResults": "{{count}} filtered results",
    "allResults": "Total {{count}} results",
    "sortRules": "Sort Rules",
    "filterRules": "Filter Rules",
    "viewMode": "View Mode",
    "filterAll": "Token ID",
    "filterByCreateTime": "Creation Time",
    "filterByName": "Name",
    "filterByEndorsement": "Endorsements",
    "filterByBirthYear": "Birth Year",
    "gridView": "Grid View",
    "listView": "List View",
    "resultsCount": "Found {{count}} results",
    "noResults": "No people found",
    "noResultsDesc": "Try adjusting your search criteria or filters",
    "hasStory": "Bio",
    "viewEncyclopedia": "View Encyclopedia",
    "hasNFT": "NFT",
    "born": "Born",
    "died": "Died",
    "chunks": "{{count}} chunks",
    "viewDetails": "View",
    "clickToEndorse": "Click to endorse this version",
    "resetFilters": "Reset filters"
  },
  "storyChunksModal": {
    "fetchError": "Failed to load story data",
    "lifeEvents": "Life Events",
    "blockchainIdentity": "Blockchain Identity",
    "viewDetail": "View Details",
    "born": "Born",
    "died": "Died",
    "storyInfo": "Biography Info",
    "chunksCount": "{{count}} chunks, {{length}} bytes",
    "addedBy": "Added By",
    "tag": "Tag",
    "personHash": "Person Hash",
    "detailedStory": "Biography",
    "chunks": "Chunks",
    "fullText": "Full Text",
    "integrityChecking": "Checking integrity...",
    "integrityVerified": "Story integrity verified",
    "integrityWarning": "Story integrity issues detected",
    "loading": "Loading story chunks...",
    "chunkTitle": "Chunk #{{index}}",
    "characters": "characters",
    "noStoryData": "No story data",
    "basicStory": "Brief Biography",
    "noStory": "No story content",
    "peopleEncyclopedia": "Encyclopedia"
  },
  "actions": {
    "title": "Blockchain Actions",
    "subtitle": "Interact with the DeepFamily protocol using your connected wallet",
    "walletRequired": "Wallet Connection Required",
    "walletRequiredDesc": "Connect your wallet to access blockchain features like adding versions, endorsing data, and minting NFTs.",
    "walletConnected": "Wallet Connected",
    "whatYouCanDo": "What you can do after connecting:",
    "feature1": "Add new person versions (earn DEEP tokens)",
    "feature2": "Endorse quality data and earn rewards",
    "feature3": "Mint person versions as NFT collectibles",
    "addVersion": "Add Version",
    "add": "Add",
    "addVersionDesc": "Add a new version of person data with zero-knowledge proofs",
    "mintNFT": "Mint NFT",
    "mint": "Mint",
    "mintNFTDesc": "Convert endorsed person data into valuable NFT collectibles",
    "endorse": "Endorse",
    "endorsement": "Endorsement",
    "endorseDesc": "Support quality data by endorsing versions with DEEP tokens",
    "startAddVersion": "Start Adding Version",
    "mintNFTHint": "First search for a person and version to mint as NFT",
    "openMintNFT": "Open NFT Minting",
    "endorseHint": "Search for person versions to endorse",
    "openEndorse": "Open Endorsement"
  },
  "addVersion": {
    "addNewVersion": "Add New Version",
    "addPerson": "Add Person",
    "description": "Add person with zero-knowledge proof",
    "versionIndexHint": "0=Unknown",
    "fatherInfo": "Father Information",
    "motherInfo": "Mother Information",
    "versionIndex": "Version Index",
    "metadata": "Metadata",
    "tag": "Tag",
    "tagPlaceholder": "Optional tag",
    "metadataCID": "Metadata CID",
    "metadataCIDPlaceholder": "Optional: IPFS CID (Qm... or bafy...)",
    "processing": "Processing...",
    "preparingData": "Preparing data...",
    "generatingProof": "Generating zero-knowledge proof...",
    "verifyingProof": "Verifying proof...",
    "submittingToBlockchain": "Submitting to blockchain...",
    "addedSuccessfully": "Person added successfully!",
    "successTitle": "Version Added Successfully",
    "successDesc": "The person version has been added to the blockchain",
    "personHash": "Person Hash",
    "transactionHash": "Transaction Hash",
    "blockNumber": "Block Number",
    "eventsTriggered": "Events Triggered",
    "zkProofVerified": "ZK Proof Verified",
    "zkProofVerifiedDesc": "Zero-knowledge proof was successfully verified on-chain",
    "versionAdded": "Person Version Added",
    "versionAddedDesc": "Person version was successfully added to the family tree",
    "addedBy": "Added By",
    "timestamp": "Timestamp",
    "fatherHash": "Father Hash",
    "fatherVersionIndex": "Father Version",
    "motherHash": "Mother Hash",
    "motherVersionIndex": "Mother Version",
    "tokenReward": "Token Reward Distributed",
    "familyComplete": "Parent hash commitments submitted - token reward earned",
    "miner": "Miner",
    "hashPrefix": "Hash",
    "prover": "Prover",
    "rewardAmount": "Reward Amount",
    "noTokenReward": "No Token Reward",
    "tokenRewardCondition": "Token rewards distribute when parent hash commitments are submitted",
    "tokenRewardTip": "Submit parent hash commitments to earn DEEP token rewards",
    "failed": "Transaction Failed",
    "errorType": "Error Type",
    "errorMessage": "Message",
    "errorDetails": "Details",
    "continueAdding": "Continue Adding",
    "submit": "Add Version",
    "cancel": "Cancel",
    "close": "Close",
    "personInfoRequired": "Please fill in person information",
    "contractNotConfigured": "Contract not configured",
    "partial": "Partial",
    "complete": "Complete",
    "proofGenerationNote": "ZK proof generation requires complex cryptographic calculations. Please wait...",
    "personInfo": "Person Information",
    "personInfoHint": "Plain text stays off-chain; used only for local ZK proof"
  },
  "mintNFT": {
    "title": "Mint NFT",
    "description": "Create a unique NFT for this person",
    "headerOnChainHint": "Minting is public: plain text will be permanently on-chain",
    "personInfo": "Person Information",
    "personHash": "Person Hash",
    "versionIndex": "Version Index",
    "checkingStatus": "Checking status...",
    "endorsed": "Endorsed",
    "notEndorsed": "Not Endorsed",
    "alreadyMinted": "Already Minted",
    "canMint": "Can Mint",
    "targetVersion": "Target Version",
    "specifyVersion": "Specify Version to Mint",
    "specifyVersionDesc": "Enter the person hash and version index of the version you want to mint as NFT.",
    "basicInfo": "Basic Information",
    "publicOnChain": "Public on chain",
    "supplementalInfo": "Supplemental Information",
    "birthPlace": "Birth Place",
    "birthPlacePlaceholder": "Enter birth place",
    "deathPlace": "Death Place",
    "deathPlacePlaceholder": "Enter death place (if applicable)",
    "deathDate": "Death Date (if applicable)",
    "deathYear": "Death Year",
    "story": "Life Story Summary",
    "storyPlaceholder": "Enter a brief life story summary...",
    "metadata": "NFT Metadata",
    "tokenURI": "Token URI",
    "tokenURIHint": "Optional: URL or IPFS hash for NFT metadata",
    "nftAlreadyMinted": "NFT Already Minted",
    "nftAlreadyMintedDesc": "This version has already been minted as an NFT. Each version can only be minted once.",
    "mint": "Mint NFT",
    "minting": "Minting...",
    "goEndorse": "Go Endorse",
    "endorsementRequiredTitle": "Endorsement Required",
    "endorsementRequiredDesc": "You must endorse this version before minting. Would you like to go endorse now?",
    "personInfoRequired": "Please fill in person information",
    "personHashRequired": "Unable to compute person hash",
    "mintFailed": "Failed to mint NFT",
    "mintedSuccessfully": "NFT minted successfully!",
    "successTitle": "NFT Minted Successfully",
    "successDesc": "Your NFT has been created on the blockchain",
    "nftDetails": "NFT Details",
    "tokenId": "Token ID",
    "owner": "Owner",
    "transactionHash": "Transaction Hash",
    "blockNumber": "Block Number",
    "timestamp": "Timestamp",
    "mintingDesc": "Creating your unique NFT on the blockchain...",
    "processing": "Processing...",
    "generatingProof": "Generating zero-knowledge proof...",
    "verifyingProof": "Verifying zero-knowledge proof...",
    "proofVerified": "Zero-knowledge proof verified. Submitting transaction...",
    "proofGenerationNote": "ZK proof generation requires heavy cryptography. Please keep this tab active until completion.",
    "nftMintedEvent": "PersonNFTMinted Event",
    "nftMintedEventDesc": "NFT was successfully minted and recorded on-chain",
    "continueMinting": "Continue Minting",
    "errorType": "Error Type",
    "errorMessage": "Message",
    "errorDetails": "Details",
    "eventDetails": "Event Details",
    "validation": {
      "birthPlaceTooLong": "Birth place is too long",
      "deathPlaceTooLong": "Death place is too long",
      "storyTooLong": "Story content is too long",
      "tokenURITooLong": "Token URI is too long",
      "invalidTokenURI": "Invalid URL or IPFS URI",
      "yearExceedsCurrent": "AD year cannot exceed current year"
    },
    "errors": {
      "versionAlreadyMinted": "This version has already been minted as NFT",
      "mustEndorseFirst": "You must endorse this version before minting",
      "basicInfoMismatch": "Person information does not match the version data",
      "invalidTokenURI": "Invalid token URI format",
      "invalidStory": "Story content is too long",
      "invalidBirthPlace": "Birth place is too long",
      "invalidDeathPlace": "Death place is too long",
      "insufficientFunds": "Insufficient funds for transaction",
      "userRejected": "Transaction was rejected by user"
    },
    "missingParentsTitle": "Incomplete Parent Information",
    "missingBothParents": "Both parent hashes are empty for this version. The creator may submit parent hash commitments later.",
    "missingFather": "The father hash is empty for this version. The creator may submit a father hash commitment later.",
    "missingMother": "The mother hash is empty for this version. The creator may submit a mother hash commitment later.",
    "parentUpdateNote": "Note: Only the original version creator can submit parent hash commitments via the updatePersonParents function."
  },
  "endorse": {
    "title": "Endorse Version",
    "description": "Support quality data by endorsing versions",
    "targetVersion": "Target Version",
    "specifyVersion": "Specify Version to Endorse",
    "specifyVersionDesc": "Enter the person hash and version index of the version you want to endorse.",
    "personHash": "Person Hash",
    "versionIndex": "Version Index",
    "versionInfo": "Version Information",
    "fullName": "Full Name",
    "currentEndorsements": "Current Endorsements",
    "deepTokenFee": "DEEP Token Fee",
    "yourBalance": "Your DEEP Balance",
    "feeRecipient": "Fee Recipient",
    "feeDistribution": "Fee Distribution",
    "nftMinted": "NFT Minted",
    "feeToNFTHolder": "{{recipientPercent}}% to NFT holder, {{protocolPercent}}% protocol fee",
    "noNFT": "No NFT Yet",
    "feeToCreator": "{{recipientPercent}}% to version creator, {{protocolPercent}}% protocol fee",
    "feeNote": "DEEP token fee is dynamic based on current mining rewards",
    "insufficientBalance": "Insufficient DEEP Token Balance",
    "needMoreTokens": "You need more DEEP tokens to endorse this version",
    "endorsementComplete": "Endorsement Complete",
    "needMoreForNext": "You need more DEEP tokens for additional endorsements",
    "benefits": "Benefits of Endorsing",
    "benefitQuality": "Help verify and improve data quality",
    "benefitPriority": "Endorsed versions get higher priority in searches",
    "benefitNFT": "Required step before minting NFTs",
    "benefitEconomy": "Support version creators and NFT holders",
    "successMessage": "You have successfully endorsed this version!",
    "approving": "Approving...",
    "endorsing": "Endorsing...",
    "endorsed": "Endorsed!",
    "endorse": "Endorse",
    "invalidTarget": "Invalid person hash or version index",
    "invalidTargetDesc": "Please verify the hash and index refer to an existing version",
    "needApprove": "Allowance too low, please approve DEEP tokens again",
    "personHashRequired": "Please provide valid person hash and version index",
    "insufficientDeepTokens": "Insufficient DEEP tokens for endorsement",
    "endorsedSuccessfully": "Version endorsed successfully!",
    "successTitle": "Endorsement Successful",
    "successDesc": "Version has been successfully endorsed",
    "endorsementDetails": "Endorsement Details",
    "feePaid": "Fee Paid",
    "transactionHash": "Transaction Hash",
    "blockNumber": "Block Number",
    "transactionInfo": "Transaction Info",
    "eventDetails": "Event Details",
    "versionEndorsedEvent": "Version endorsed successfully",
    "versionEndorsedEventDesc": "Endorsement was successfully recorded on-chain",
    "endorser": "Endorser",
    "totalFee": "Total Fee",
    "feeAmount": "Fee Amount",
    "recipient": "Recipient",
    "recipientShare": "Recipient Share",
    "protocolRecipient": "Protocol Recipient",
    "protocolShare": "Protocol Share",
    "timestamp": "Timestamp",
    "endorseFailed": "Endorsement Failed",
    "errorType": "Error Type",
    "errorMessage": "Message",
    "errorDetails": "Details",
    "continueEndorsing": "Continue Endorsing",
    "canContinueEndorsing": "You can now continue to endorse other versions or close this dialog.",
    "transactionFailed": "Transaction failed. Please check the error message and try again.",
    "transactionFailedDetails": "The transaction was submitted but failed to complete successfully.",
    "approvingDesc": "Please confirm the token approval in your wallet",
    "endorsingDesc": "Processing endorsement on the blockchain...",
    "errors": {
      "invalidTarget": "Invalid person hash or version index",
      "needApprove": "Allowance too low, please approve DEEP tokens again",
      "insufficientDeepTokens": "Insufficient DEEP tokens for endorsement",
      "feeTransferFailed": "Failed to transfer endorsement fee",
      "insufficientFunds": "Insufficient funds for transaction",
      "userRejected": "Transaction was rejected by user",
      "walletTimeout": "Wallet confirmation timed out. The wallet popup may have been closed or hidden.",
      "walletTimeoutDetails": "Please try again and make sure to confirm the transaction in your wallet popup window."
    },
    "approveUnlimited": "Approve unlimited DEEP allowance to avoid future approvals",
    "approveUnlimitedHint": "Recommended: Each endorsement consumes allowance, unlimited approval avoids repeated authorizations",
    "retryTransaction": "Retry Transaction"
  },
  "transaction": {
    "pending": "Transaction pending confirmation...",
    "pendingDetails": "Transaction has been submitted or waiting for wallet confirmation. You can continue using the app, we'll update after confirmation.",
    "submitted": "Transaction submitted...",
    "success": "Transaction successful",
    "failed": "Transaction failed",
    "rejected": "Transaction rejected by user",
    "insufficientFunds": "Insufficient funds",
    "walletTimeout": "Wallet confirmation timed out. Please try again and make sure to confirm in the wallet popup."
  },
  "contract": {
    "endorseSuccess": "endorse success",
    "endorseFailed": "endorse failed",
    "addVersionSuccess": "Person version added successfully",
    "addVersionFailed": "Failed to add person version",
    "mintSuccess": "NFT minted successfully",
    "mintFailed": "Failed to mint NFT"
  }
}
